#!/usr/bin/env node

/**
 * Script de prueba para la integraci√≥n BCN
 * Ejecutar: node test-bcn-integration.js
 */

const bcnService = require('./src/services/bcnService');

async function testBcnIntegration() {
  console.log('üß™ Iniciando prueba de integraci√≥n BCN...\n');

  try {
    // 1. Verificar disponibilidad
    console.log('1Ô∏è‚É£  Verificando disponibilidad del servicio BCN...');
    const availability = await bcnService.checkAvailability();
    console.log(`   ‚úì Estado: ${availability.available ? 'Disponible' : 'No disponible'}`);
    console.log(`   ‚úì Status Code: ${availability.status}`);
    console.log(`   ‚úì Mensaje: ${availability.message}\n`);

    // 2. Obtener a√±os disponibles
    console.log('2Ô∏è‚É£  Obteniendo a√±os disponibles...');
    const years = bcnService.getAvailableYears();
    console.log(`   ‚úì A√±os disponibles: ${years.length}`);
    console.log(`   ‚úì Rango: ${Math.min(...years)} - ${Math.max(...years)}\n`);

    // 3. Probar obtenci√≥n de datos para 2024
    console.log('3Ô∏è‚É£  Obteniendo datos de BCN para el a√±o 2024...');
    let bcnData;
    try {
      bcnData = await bcnService.getBudgetData(2024);
    } catch (error) {
      console.log('   ‚ö†Ô∏è  Error obteniendo datos de BCN (esperado en primera ejecuci√≥n)');
      console.log(`   ‚ÑπÔ∏è  Raz√≥n: ${error.message}`);
      console.log('   ‚ÑπÔ∏è  Esto es normal - BCN requiere an√°lisis manual de la estructura HTML');
      console.log('   ‚ÑπÔ∏è  La aplicaci√≥n usar√° datos mock como fallback\n');
      
      // Usar datos de fallback para continuar la prueba
      bcnData = bcnService.getFallbackData(2024);
    }
    
    if (bcnData.isFallback) {
      console.log('   ‚ö†Ô∏è  Usando datos de fallback');
      console.log(`   ‚ÑπÔ∏è  Nota: ${bcnData.note}`);
      console.log('   ‚ÑπÔ∏è  La aplicaci√≥n seguir√° funcionando con datos mock\n');
    } else {
      console.log('   ‚úì Datos obtenidos exitosamente');
      console.log(`   ‚úì A√±o: ${bcnData.year}`);
      console.log(`   ‚úì Fuente: ${bcnData.source}`);
      console.log(`   ‚úì URL: ${bcnData.sourceUrl}`);
      console.log(`   ‚úì Datos reales: ${bcnData.isRealData ? 'S√≠' : 'No'}`);
      console.log(`   ‚úì N√∫mero de partidas: ${bcnData.partidasCount}`);
      
      if (bcnData.totales) {
        console.log('\n   üìä Totales:');
        console.log(`      - Aprobado: $${(bcnData.totales.aprobado / 1000000000000).toFixed(2)} billones`);
        console.log(`      - Vigente: $${(bcnData.totales.vigente / 1000000000000).toFixed(2)} billones`);
        console.log(`      - Devengado: $${(bcnData.totales.devengado / 1000000000000).toFixed(2)} billones`);
        console.log(`      - % Ejecuci√≥n: ${bcnData.totales.porcentajeEjecucion.toFixed(2)}%`);
      }

      if (bcnData.partidas && bcnData.partidas.length > 0) {
        console.log('\n   üìã Primeras 3 partidas:');
        bcnData.partidas.slice(0, 3).forEach((partida, i) => {
          console.log(`      ${i + 1}. ${partida.numero} - ${partida.nombre}`);
          console.log(`         Vigente: $${(partida.vigente / 1000000000).toFixed(2)} mil millones`);
        });
      }
      console.log();
    }

    // 4. Transformar a formato est√°ndar
    console.log('4Ô∏è‚É£  Transformando datos al formato est√°ndar...');
    const standardData = bcnService.transformToStandardFormat(bcnData);
    
    if (standardData) {
      console.log('   ‚úì Transformaci√≥n exitosa');
      console.log(`   ‚úì N√∫mero de ministerios: ${standardData.ministriesCount}`);
      console.log(`   ‚úì Presupuesto total: $${(standardData.totalBudget / 1000000000000).toFixed(2)} billones`);
      
      if (standardData.ministries && standardData.ministries.length > 0) {
        console.log('\n   üèõÔ∏è  Top 3 ministerios por presupuesto:');
        standardData.ministries.slice(0, 3).forEach((ministry, i) => {
          console.log(`      ${i + 1}. ${ministry.name}`);
          console.log(`         Presupuesto: $${(ministry.budget / 1000000000000).toFixed(2)} billones (${ministry.percentage.toFixed(1)}%)`);
          console.log(`         Ejecuci√≥n: ${ministry.executionPercentage.toFixed(1)}%`);
        });
      }
    } else {
      console.log('   ‚ö†Ô∏è  No se pudo transformar (datos de fallback)');
    }

    console.log('\n‚úÖ Prueba de integraci√≥n BCN completada exitosamente!\n');

  } catch (error) {
    console.error('\n‚ùå Error en la prueba de integraci√≥n:');
    console.error(`   ${error.message}`);
    console.error(`\n   Stack trace:`);
    console.error(error.stack);
    process.exit(1);
  }
}

// Ejecutar la prueba
testBcnIntegration();
